## MySQL锁

数据库锁设计的初衷是处理并发问题。作为多用户共享的资源，当出现并发访问的时候，数据库需要合理地控制资源的访问规则。而锁就是用来实现这些访问规则的重要数据结构。



根据加锁的范围，MySQL 里面的锁大致可以分成全局锁、表级锁和行锁三类

| 序号 | 问题                                    | 一句话简介                                                   |
| ---- | --------------------------------------- | ------------------------------------------------------------ |
| 0    | 小表DDL的时候，为什么有可能搞挂整个库？ | 如果小表读写频繁，一条DDL需要写锁，但是有可能被正在执行的select语句获取读锁，导致写锁等待，<br>后面的线程连读锁都拿不到了；<br/>而客户端有重试机制，就可能把线程池打满 |
| 1    |                                         |                                                              |
| 2    |                                         |                                                              |



### 1. 全局锁

顾名思义，全局锁就是对整个数据库实例加锁。

> MySQL 提供了一个加全局读锁的方法，命令是 **Flush tables with read lock (FTWRL)**。当你需要让整个库处于只读状态的时候，可以使用这个命令，之后其他线程的update语句会被阻塞

全局锁的典型使用场景是，做全库逻辑备份。也就是把整库每个表都 select 出来存成文本。



- 逻辑备份过程中整个库完全处于只读状态，非常危险的

  - 如果你在主库上备份，那么在备份期间都不能执行更新，业务基本上就得停摆；
  - 如果你在从库上备份，那么备份期间从库不能执行主库同步过来的 binlog，会导致主从延迟。

- 那怎么办才能拿到一致性视图呢？ 

  **就是在可重复读隔离级别下开启一个事务。**

  - 官方自带的逻辑备份工具是 mysqldump。
  - 当 mysqldump 使用参数–single-transaction 的时候，导数据之前就会启动一个事务，来确保拿到一致性视图。
  - 而由于 MVCC 的支持，这个过程中数据是可以正常更新的。

  

### 2. 表级锁

1. MySQL 里面表级别的锁有两种：一种是表锁，一种是元数据锁（meta data lock，MDL)。

2. 在还没有出现更细粒度的锁的时候，表锁是最常用的处理并发的方式。而对于 InnoDB 这种支持行锁的引擎，一般不使用 lock tables 命令来控制并发，毕竟锁住整个表的影响面还是太大。

3. 表锁的语法是 **lock tables … read/write**

   与 FTWRL 类似，可以用 unlock tables 主动释放锁，也可以在客户端断开的时候自动释放。

   > 需要注意，lock tables 语法除了会限制别的线程的读写外，也限定了本线程接下来的操作对象。

   > 举个例子, 如果在某个线程 A 中执行 lock tables t1 read, t2 write; 这个语句，则其他线程写 t1、读写 t2 的语句都会被阻塞。同时，线程 A 在执行 unlock tables 之前，也只能执行读 t1、读写 t2 的操作。连写 t1 都不允许，自然也不能访问其他表。

4. 另一类表级的锁是 **MDL（metadata lock)**。MDL 不需要显式使用，在访问一个表的时候会被自动加上。MDL 的作用是，保证读写的正确性。

   你可以想象一下，如果一个查询正在遍历一个表中的数据，而执行期间另一个线程对这个表结构做变更，删了一列，那么查询线程拿到的结果跟表结构对不上，肯定是不行的。

   因此，在 MySQL 5.5 版本中引入了 MDL，当对一个表做增删改查操作的时候，加 MDL 读锁；当要对表做结构变更操作的时候，加 MDL 写锁。

   - 读锁之间不互斥，因此你可以有多个线程同时对一张表增删改查。

   - 读写锁之间、写锁之间是互斥的，用来保证变更表结构操作的安全性。因此，如果有两个线程要同时给一个表加字段，其中一个要等另一个执行完才能开始执行。

   

### 3.行锁

